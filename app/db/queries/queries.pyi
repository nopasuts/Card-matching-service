"""Typings for queries generated by aiosql"""

from typing import Dict, Optional, Sequence

from asyncpg import Connection, Record

class GamesQueriesMixin:
    async def get_game_info_by_board_id(self, conn: Connection, *, board_id: str) -> Record: ...
    async def create_new_game(
        self, conn: Connection, board_id: str, click_count: int, is_finish: bool, columns: int, rows: int
    ) -> Record: ...
    async def update_game_click_count(
        self,
        conn: Connection,
        board_id: str,
        click_count: int,
    ) -> Record: ...
    async def finish_game(
        self,
        conn: Connection,
        board_id: str,
        is_finish: bool,
    ) -> Record: ...

class CardsQueriesMixin:
    async def get_cards_by_game_id(self, conn: Connection, *, game_id: int) -> Record: ...
    async def get_card_by_position(self, conn: Connection, *, position: str, game_id: int) -> Record: ...
    async def create_new_cards(
        self, conn: Connection, cards: Dict[str, any]
    ) -> None: ...
    async def update_is_open_card(self, conn: Connection, *, position: str, game_id: int, is_open: bool) -> Record: ...

class StatsQueriesMixin:
    async def get_user_by_user_id(self, conn: Connection, *, user_id: str) -> Record: ...
    async def create_new_user(self, conn: Connection, *, user_id: str, best_click_count: int) -> Record: ...
    async def update_user_best_click_count(
        self, conn: Connection, user_id: str, best_click_count: int
    ) -> Record: ...
    async def update_global_best_click_count(self, conn: Connection, best_click_count: int) -> Record: ...


class Queries(
    GamesQueriesMixin,
    CardsQueriesMixin,
    StatsQueriesMixin
): ...

queries: Queries
